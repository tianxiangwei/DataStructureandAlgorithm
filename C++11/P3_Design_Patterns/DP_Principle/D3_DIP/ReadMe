依赖倒置原则(Dependence Inversion Principle,DIP)
1）要依赖抽象，不要依赖具体的实现类。简单的说就是对抽象（或接口）进行编程，不要依赖实现进行编程，这样就降低了客户与实现模块间的耦合。包含3层含义：

　　①高层模块不应依赖低层模块，两者都应该依赖于抽象

　　②抽象不应该依赖细节

　　③细节应该依赖于抽象

（2）何为“高层模块”和“低层模块”

　　①“低层模块”：每个逻辑的实现都是原子逻辑组成，不可分割的原子逻辑就是低层模块。一般和具体实现相关。

　　②“高层模块”：原子逻辑再组装就是高层模块，一般和业务逻辑相关。如客户端。

（3）何为“倒置”

　　①“依赖正置”：就是类间的依赖是实实在在的实现类间的依赖，也就是面向实现编程，这符合人的正常思维。如我们开奔驰车就是依赖奔驰车，使用笔记本电脑就直接依赖笔记本电脑。

　　②“依赖倒置”：编程是对现实世界事物进行抽象，然后我们根据系统设计的需要产生了对抽象的依赖，代替了人的传统思维中事物间的依赖，这叫“倒置”。
