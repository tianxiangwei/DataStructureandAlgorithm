单例模式（Singleton Pattern）
（1）定义：保证一个类仅有一个实例，同时提供能对该实例加以访问的全局访问方法。
 (2）解决思路：

  ①在类中，要构造一个实例，就必须调用类的构造函数。如此，为了防止在外部调用类的构造函数而创建实例，需要将构造函数的访问权限设为protected或private；
  ②最后，需要提供全局访问点，就需要在类中定义一个static函数，返回在类内部唯一构造的实例。

. 单例模式的应用

（1）单例模式的优点

　　①由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。

　　②由于单例模式只生成一个实例，所以减少了系统性能开销，当一个对象的产生需要较多资源时，可以启用一个单例对象然后长驻内存又节约内存空间。

　　③单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。

　　④单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。

（2）单例模式的缺点

　　①单例模式一般没有接口，扩展很困难。因其“自动实例化”，而抽象类和接口是不能被实例化的。所以不能增加接口

　　②单例模式对测试不利。在并行的开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也就不能虚拟一个对象。

（3）使用的注意事项

　　①首先在高并发的情况下，要注意单例模式的线程同步问题。

　　②单例类一般不会主动要求被复制的，因此复制构造函数和赋值构造函数一般也设为私有。

4. 单例模式的使用场景

（1）多线程之间共享一个资源或者操作同一个对象

（2）在整个程序空间中使用全局变量，共享资源

（3）在创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源。

（4）大规模系统中，为了性能的考虑，需要节省对象的创建时间

（5）要求生成唯一序列号的环境或用单例做为一个计数器。

5. 单例模式的扩展

（1）可以在单例类，定义产生实例的数量和列表，来控制创建的实例数量，这叫多例模式

（2）多例是单例的一种扩展，采用有上限的多例模式，可以在设计时决定内存中有多少个实例，以修正单例可能存在的性能问题，提高系统的响应速度。


